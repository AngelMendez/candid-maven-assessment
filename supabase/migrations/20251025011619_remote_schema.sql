


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."submission_logs" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "lead_id" "uuid",
    "status" "text" NOT NULL,
    "error_message" "text",
    "partner_api" "text"
);


ALTER TABLE "public"."submission_logs" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."daily_partner_performance" AS
 SELECT "date"("created_at") AS "report_date",
    "partner_api",
    "count"(*) AS "total_submissions",
    "count"(
        CASE
            WHEN ("status" = 'SUCCESS'::"text") THEN 1
            ELSE NULL::integer
        END) AS "successful_submissions",
    "count"(
        CASE
            WHEN ("status" <> 'SUCCESS'::"text") THEN 1
            ELSE NULL::integer
        END) AS "failed_submissions",
    (((("count"(
        CASE
            WHEN ("status" <> 'SUCCESS'::"text") THEN 1
            ELSE NULL::integer
        END))::numeric * 100.0) / ("count"(*))::numeric))::numeric(5,2) AS "failure_rate_percent"
   FROM "public"."submission_logs"
  WHERE ("partner_api" IS NOT NULL)
  GROUP BY ("date"("created_at")), "partner_api"
  ORDER BY ("date"("created_at")) DESC, ("count"(*)) DESC;


ALTER VIEW "public"."daily_partner_performance" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."lead_processing_queue" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "payload" "jsonb" NOT NULL,
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "attempts" integer DEFAULT 0 NOT NULL,
    "last_attempt_at" timestamp with time zone,
    "processing_log" "text"
);


ALTER TABLE "public"."lead_processing_queue" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."leads" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "email" "text" NOT NULL,
    "interest" "text"
);


ALTER TABLE "public"."leads" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."routing_rules" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "priority" integer NOT NULL,
    "conditions" "jsonb" NOT NULL,
    "partner_api_url" "text" NOT NULL,
    "partner_name" "text",
    "is_active" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."routing_rules" OWNER TO "postgres";


ALTER TABLE "public"."routing_rules" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."routing_rules_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."submission_logs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."submission_logs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."lead_processing_queue"
    ADD CONSTRAINT "lead_processing_queue_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."leads"
    ADD CONSTRAINT "leads_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."leads"
    ADD CONSTRAINT "leads_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."routing_rules"
    ADD CONSTRAINT "routing_rules_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."submission_logs"
    ADD CONSTRAINT "submission_logs_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_routing_rules_priority" ON "public"."routing_rules" USING "btree" ("priority");



ALTER TABLE ONLY "public"."submission_logs"
    ADD CONSTRAINT "submission_logs_lead_id_fkey" FOREIGN KEY ("lead_id") REFERENCES "public"."leads"("id");





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."submission_logs" TO "anon";
GRANT ALL ON TABLE "public"."submission_logs" TO "authenticated";
GRANT ALL ON TABLE "public"."submission_logs" TO "service_role";



GRANT ALL ON TABLE "public"."daily_partner_performance" TO "anon";
GRANT ALL ON TABLE "public"."daily_partner_performance" TO "authenticated";
GRANT ALL ON TABLE "public"."daily_partner_performance" TO "service_role";



GRANT ALL ON TABLE "public"."lead_processing_queue" TO "anon";
GRANT ALL ON TABLE "public"."lead_processing_queue" TO "authenticated";
GRANT ALL ON TABLE "public"."lead_processing_queue" TO "service_role";



GRANT ALL ON TABLE "public"."leads" TO "anon";
GRANT ALL ON TABLE "public"."leads" TO "authenticated";
GRANT ALL ON TABLE "public"."leads" TO "service_role";



GRANT ALL ON TABLE "public"."routing_rules" TO "anon";
GRANT ALL ON TABLE "public"."routing_rules" TO "authenticated";
GRANT ALL ON TABLE "public"."routing_rules" TO "service_role";



GRANT ALL ON SEQUENCE "public"."routing_rules_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."routing_rules_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."routing_rules_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."submission_logs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."submission_logs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."submission_logs_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";































RESET ALL;

